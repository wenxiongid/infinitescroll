// Generated by CoffeeScript 1.10.0
var InfiniteScroll, cancelAnimationFrame, requestAnimationFrame;

requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function(callback) {
  return window.setTimeout(callback, 1000 / 60);
};

cancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame || window.oCancelAnimationFrame || function(handle) {
  return window.clearTimeout(handle);
};

InfiniteScroll = (function() {
  function InfiniteScroll(scrollHeight, scrollCallback, option) {
    this.option = option;
    this.wrapper = document.body;
    this.lowExpand = this.option && this.option.lowExpand ? this.option.lowExpand : 0.1 * scrollHeight;
    this.highExpand = this.option && this.option.highExpand ? this.option.highExpand : 0.1 * scrollHeight;
    this.scrollPlaceholder = document.createElement('div');
    this.setScrollHeight(scrollHeight);
    if (this.wrapper.firstChild) {
      this.wrapper.insertBefore(this.scrollPlaceholder, this.wrapper.firstChild);
    } else {
      this.wrapper.appendChild(this.scrollPlaceholder);
    }
    if (typeof scrollCallback === 'function') {
      this.scrollCallback = scrollCallback;
    }
    this.addEventListener();
  }

  InfiniteScroll.prototype.setScrollHeight = function(height) {
    this.scrollHeight = height;
    this.calcScrollHeight = this.lowExpand + height + this.highExpand;
    return this.scrollPlaceholder.style.height = this.calcScrollHeight + "px";
  };

  InfiniteScroll.prototype.addEventListener = function() {
    var currentTop;
    currentTop = document.body.scrollTop || document.documentElement.scrollTop;
    this.scrollTo(this.calcScroll(currentTop));
    return this.eventHandler = requestAnimationFrame(this.addEventListener.bind(this));
  };

  InfiniteScroll.prototype.removeEventListener = function() {
    return cancelAnimationFrame(this.eventHandler);
  };

  InfiniteScroll.prototype.calcScroll = function(target) {
    var dest;
    dest = target;
    if (target < this.lowExpand) {
      dest += this.scrollHeight;
    }
    if (target > this.lowExpand + this.scrollHeight) {
      dest -= this.scrollHeight;
    }
    return dest;
  };

  InfiniteScroll.prototype.scrollTo = function(target) {
    var progress;
    document.body.scrollTop = document.documentElement.scrollTop = target;
    progress = (target - this.lowExpand) / this.scrollHeight;
    if (this.scrollCallback) {
      return this.scrollCallback(progress);
    }
  };

  return InfiniteScroll;

})();
