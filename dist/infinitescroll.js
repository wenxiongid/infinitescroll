// Generated by CoffeeScript 1.10.0
var InfiniteScroll, cancelAnimationFrame, requestAnimationFrame;

requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function(callback) {
  return window.setTimeout(callback, 1000 / 60);
};

cancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame || window.oCancelAnimationFrame || function(handle) {
  return window.clearTimeout(handle);
};

InfiniteScroll = (function() {
  function InfiniteScroll(wrapper, scrollHeight, scrollCallback, option) {
    this.wrapper = wrapper;
    this.option = option;
    this.lowExpand = this.option && this.option.lowExpand ? this.option.lowExpand : 0.1 * scrollHeight;
    this.highExpand = this.option && this.option.highExpand ? this.option.highExpand : 0.1 * scrollHeight;
    this.scrollPlaceholder = document.createElement('div');
    this.setScrollHeight(scrollHeight);
    if (this.wrapper.firstChild) {
      this.wrapper.insertBefore(this.scrollPlaceholder, this.wrapper.firstChild);
    } else {
      this.wrapper.appendChild(this.scrollPlaceholder);
    }
    if (typeof scrollCallback === 'function') {
      this.scrollCallback = scrollCallback;
    }
    this.addEventListener();
  }

  InfiniteScroll.prototype.setScrollHeight = function(height) {
    this.scrollHeight = height;
    this.calcScrollHeight = this.lowExpand + height + this.highExpand;
    return this.scrollPlaceholder.style.height = this.calcScrollHeight + "px";
  };

  InfiniteScroll.prototype.addEventListener = function() {
    var currentTop;
    currentTop = document.body.scrollTop || document.documentElement.scrollTop;
    this.scrollTo(this.calcScroll(currentTop));
    return this.eventHandler = requestAnimationFrame(this.addEventListener.bind(this));
  };

  InfiniteScroll.prototype.removeEventListener = function() {
    return cancelAnimationFrame(this.eventHandler);
  };

  InfiniteScroll.prototype.calcScroll = function(target) {
    var dest;
    dest = target;
    if (target < this.lowExpand) {
      dest += this.scrollHeight;
    }
    if (target > this.lowExpand + this.scrollHeight) {
      dest -= this.scrollHeight;
    }
    return dest;
  };

  InfiniteScroll.prototype.scrollTo = function(target) {
    var progress;
    if (target === this.lastScrollTop) {
      return;
    }
    document.body.scrollTop = document.documentElement.scrollTop = target;
    progress = (target - this.lowExpand) / this.scrollHeight;
    this.lastScrollTop = target;
    if (this.scrollCallback) {
      return this.scrollCallback(progress);
    }
  };

  InfiniteScroll.prototype.calcProgressToScroll = function(progress) {
    return this.lowExpand + progress * this.scrollHeight;
  };

  InfiniteScroll.prototype.travelTo = function(target, callback) {
    var currentTop, progress, scroll, travel;
    if (this.isTraveling) {
      return;
    }
    this.isTraveling = true;
    scroll = target.scroll, progress = target.progress;
    currentTop = this.lastScrollTop;
    if (typeof scroll === 'undefined' && typeof progress !== 'undefined') {
      scroll = this.calcProgressToScroll(progress);
    }
    if (scroll < currentTop) {
      scroll += this.scrollHeight;
    }
    travel = (function(_this) {
      return function() {
        currentTop += Math.ceil((scroll - currentTop) / 30);
        _this.scrollTo(_this.calcScroll(currentTop));
        if (Math.abs(currentTop - scroll) < 1) {
          cancelAnimationFrame(_this.travelHandler);
          if (callback && typeof callback === 'function') {
            callback();
          }
          return _this.isTraveling = false;
        } else {
          return _this.travelHandler = requestAnimationFrame(travel);
        }
      };
    })(this);
    return this.travelHandler = requestAnimationFrame(travel);
  };

  return InfiniteScroll;

})();
